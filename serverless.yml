service: cen3031-backend

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  stackTags:
    SITE: ${self:service}-${self:provider.stage}
  tags:
    SITE: ${self:service}-${self:provider.stage}
  environment: 
    REGION: ${self:provider.region}
    TASKSTABLEID: ${self:service}-${self:provider.stage}-${self:provider.region}-tasks
    COMMENTSTABLEID: ${self:service}-${self:provider.stage}-${self:provider.region}-comments
    

  lambdaHashingVersion: 20201221
  httpApi:
    cors: true

functions:
  getTasks:
    handler: src/handler.getTasks
    role: dynamodbRole
    events:
     - httpApi:
        path: /tasks
        method: get
  getTask:
    handler: src/handler.getTask
    role: dynamodbRole
    events:
     - httpApi:
        path: /tasks/{id}
        method: get
        request: 
          parameters: 
            paths: 
              id: true
  createTask:
    handler: src/handler.createTask
    role: dynamodbRole
    events:
     - httpApi:
        path: /tasks
        method: post
  updateTask:
    handler: src/handler.updateTask
    role: dynamodbRole
    events:
     - httpApi:
        path: /tasks
        method: patch

resources:
  Resources:
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AWS_TASKTABLEID}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # LocalSecondaryIndexes:
        #   - IndexName: referenceLocalIndex
        #     KeySchema:
        #     - AttributeName: id
        #       KeyType: HASH
        #     - AttributeName: task
        #       KeyType: RANGE
        #     Projection:
        #       ProjectionType: KEYS_ONLY
          # - IndexName: commentsLSI
          #   KeySchema:
          #   - AttributeName: id
          #     KeyType: HASH
          #   - AttributeName: type
          #     KeyType: RANGE
          #   Projection:
          #     NonKeyAttributes:
          #     - timestamp
          #     - body
          #     - from
          #     ProjectionType: INCLUDE
    commentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AWS_COMMENTSTABLEID}
        AttributeDefinitions:
          - AttributeName: task
            AttributeType: S
          - AttributeName: created_at
            AttributeType: N
        KeySchema:
          - AttributeName: task
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    dynamodbRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole-dynamoDb # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        # ManagedPolicyArns:
        #   - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: AWSLambdaDynamoDbBasicPerms
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:provider.environment.TASKSTABLEID}'
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:provider.environment.COMMENTSTABLEID}'
    
package:
  exclude:
    - node_modules/aws-sdk/**

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin